[
  {
    "path": "/ld8/daily-notes-retail-website-p5-2020-02-16-23cl",
    "url": "https://dev.to/ld8/daily-notes-retail-website-p5-2020-02-16-23cl",
    "published_timestamp": "2022-05-15T02:41:16Z",
    "public_reactions_count": 4,
    "id": 1085660,
    "type_of": "article",
    "title": "Retail Website built with Django P5 (2020-02-16)",
    "description": "Django:               delete one table in django sqlite: SO comment      $ python manage.py...",
    "published": true,
    "published_at": "2022-05-15T02:41:16.070Z",
    "slug": "daily-notes-retail-website-p5-2020-02-16-23cl",
    "comments_count": 0,
    "page_views_count": 13,
    "positive_reactions_count": 4,
    "tag_list": ["django", "dailynotes"],
    "body_markdown": "\n## Django:\n---\n### delete one table in django sqlite: [SO comment](https://stackoverflow.com/a/17041402/11901269)\n```bash\n$ python manage.py dbshell\n# if you do not know which table to delete/drop, run:\nsqlite \u003e SELECT * FROM sqlite_master WHERE type='table';\n# if you already know:\nsqlite \u003e DROP TABLE appname_modelname;\n\n# DO NOT FORGET the semi-colon at the end, otherwise it will prompt '...\u003e' signalling the expression is unfinished\n```\n---\n* ### where should `signal.py` file lives: \n[article by Vitor Freitas](https://simpleisbetterthancomplex.com/tutorial/2016/07/28/how-to-create-django-signals.html) \u0026 [Django official doc](https://docs.djangoproject.com/en/3.0/topics/signals/)\n1. create `signal.py` file in the same directory as `models.py` and `urls.py` etc.\n2. edit the file, write your code\n3. add following code in `apps.py` file under the same directory\n\t```python\n\tdef ready(self):\n\t\timport appName.signals # noqa\n\t```\n4. register in `settings.py`, in `INSTALLED_APPS`, register `'appName.apps.appNameConfig',` for signal.py to work properly\n\nfollow the four steps\n\n---\n* ### models - `DateTimeField(auto_now=True)` and `DateTimeField(auto_now_add=True)`\n  * `DateTimeField(auto_now=True)` -- update everytime this model instance is edited\n  * `DateTimeField(auto_now_add=True)` -- set the time once when this model instance is created\n\n---\n* ### SO ask and answered [Django - logout view customisation fail](https://stackoverflow.com/questions/60256470/django-logout-view-customisation-fail/60256968?noredirect=1#comment106584955_60256968)\n\n---\n* ### context processor\n\t* adding a context processor to your project if you find repetitive bahavior in passing the same context to different views:\n\t\t1. in the same directory of `models.py` create a file named `context_processors.py`\n    2. create a function: \n    ```python\n    from .models import Category\n\t\tfrom django.template.context_processors import request\n\n    def category_context_processor(request):\n        categories = Category.objects.all()\n        return {'categories': categories}\n    ```\n    3. add this processor to `settings.py`\n    ```python\n    TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                ... # other processors\n                ... # add code below:\u003capp-name\u003e.\u003cfile-name\u003e.\u003cfunction-name\u003e\n                'app-name.context_processors.category_context_processor',\n            \t\t],\n        \t\t},\n    \t\t},\n\t\t]\n    ```\nNow you don't have to pass `categories` to each view now! And this code will run on every request on the site.\n\n\n## Bootstrap\n---\n### to override default\nsimply add an id to body tag\n```html\n\u003cbody id=\"bootstrap-override\"\u003e\n```\nand refer to this id when overriding default css\n\n---\n\n## General knowledge\n---\n### url in css:\n* Because css is a static file, so the url inside is better be static as well. so just use relative url for url() in css files.\n* for some reason it's slow to load a file when you pupdate it in css. sometime I have to restart the local server for it to take effect\n\n\n### ## [Debug Toolbar](https://django-debug-toolbar.readthedocs.io/en/latest/index.html)\n\n* To optimize database queries: [article](https://simpleisbetterthancomplex.com/tips/2016/05/16/django-tip-3-optimize-database-queries.html) by Victor Freitas\n  * Use `select_related` to avoid unnecessary queries\n  * Use Debug Toolbar to track the queries\n* \n\n",
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--logz8eXs--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9h9u80nu0j2oz079hj9.png",
    "canonical_url": "https://dev.to/ld8/daily-notes-retail-website-p5-2020-02-16-23cl",
    "reading_time_minutes": 2,
    "user": {
      "name": "Peiwen Li",
      "username": "ld8",
      "twitter_username": null,
      "github_username": "LD8",
      "website_url": "https://donlee.online",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--8Loofj0g--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/581482/7a16c106-e359-4493-a620-3d2891273245.JPG",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--7HGgm48o--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/581482/7a16c106-e359-4493-a620-3d2891273245.JPG"
    }
  },
  {
    "type_of": "article",
    "id": 1085659,
    "title": "Retail Website built with Django P4 (2020-02-10)",
    "description": "Django:               template {{forloop.counter0}}      {% for image in...",
    "published": true,
    "published_at": "2022-05-15T02:38:21.663Z",
    "slug": "daily-notes-retail-website-in-russian-p4-2020-02-10-405e",
    "path": "/ld8/daily-notes-retail-website-in-russian-p4-2020-02-10-405e",
    "url": "https://dev.to/ld8/daily-notes-retail-website-in-russian-p4-2020-02-10-405e",
    "comments_count": 0,
    "public_reactions_count": 4,
    "page_views_count": 14,
    "published_timestamp": "2022-05-15T02:38:21Z",
    "body_markdown": "\n## Django:\n---\n### template `{{forloop.counter0}}`\n```html\n{% for image in item.itemimage_set.all %}\n\u003cli data-target=\"#item{{item.pk}}Carousel\" data-slide-to=\"{{forloop.counter0}}\"\u003e\u003c/li\u003e\n{% endfor %}\n```\n`forloop.counter0` is 0-indexed\n`forloop.counter` is 1-indexed\n\nmore variables in forloop can be found [here](https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#for):\n* forloop.revcounter\n* forloop.revcounter0\n* forloop.first\n* forloop.last\n* forloop.parentloop\n\n### ForeignKey.on_delete\n`ForeignKey` takes in `on_delete` argument to deal with the situation where the `ForeignKey` object is being deleted. The value of `on_delete` argument represents this behaviour. There are 3 options (In the examples below, `Item` model has `Category` as a `ForeignKey`):\n\n* `on_delete=models.CASCADE` : deleting a foreign object, i.e. a `category`, will automatically delete all of the `item`s under that category\n* `on_delete=models.PROTECT`: deleteing a foreign object, i.e. a `category`, will automatically prompt 'Can Not Delete' if there's `item`s under that category, And the `item`s will be listed\n* `on_delete=models.SET_NULL`: deleteing a foreign object, i.e. a `category`, will set this foreign key to `Null` in all of the `item`s originally under that category.\n\n---\n### Google Font\n1. Go to Google Fonts: https://fonts.google.com/\n2. add the fonts for your website\n3. interact with the pop up at bottom right corner\n4. copy url\n5. go to your css file\n6. paste: @import url(...)\n7. apply the font into css element as usual (font-family: 'Forum', cursive;). you can also copy this on the popup\n\n---\n\n\n## Python\n---\n### why @property decorator? [SO question ref](https://stackoverflow.com/questions/58558989/what-does-djangos-property-do)\n\n* the function within the class can be accessed like a class' property instead of a function()\n  1. you don't have to call it with `()` to gain access to the result\n  2. you can pass parameter into it and process existing class values\n    ```python\n    class Person(models.Model):\n      first_name = models.CharField(max_length=50)\n      last_name = models.CharField(max_length=50)\n      birth_date = models.DateField()\n      \n      @property\n      def full_name(self):\n        \"Returns the person's full name.\"\n        return '%s %s' % (self.first_name, self.last_name)\n      \n      @full_name.setter\n      def full_name(self, value):\n         names = value.split(' ')\n         self.first_name = names[0]\n         self.last_name = names[1]\n    ```\n  \n\n## VS Code\n---\nShortcuts - Find and replace:\n* Find: command + F\n* Add next occurrence: command + D\n* Add ALL occurrences: option + Enter\n* Replacement: command + option + F\n* Replace: command + Enter",
    "positive_reactions_count": 4,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--59k7droe--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ueyf4nsko0pn49g5erb.png",
    "tag_list": ["django", "dailynotes"],
    "canonical_url": "https://dev.to/ld8/daily-notes-retail-website-in-russian-p4-2020-02-10-405e",
    "reading_time_minutes": 2,
    "user": {
      "name": "Peiwen Li",
      "username": "ld8",
      "twitter_username": null,
      "github_username": "LD8",
      "website_url": "https://donlee.online",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--8Loofj0g--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/581482/7a16c106-e359-4493-a620-3d2891273245.JPG",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--7HGgm48o--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/581482/7a16c106-e359-4493-a620-3d2891273245.JPG"
    }
  },
  {
    "type_of": "article",
    "id": 1085657,
    "title": "Retail Website built with Django P3 (2020-02-07)",
    "description": "Django:               in urls.py be careful which goes first      app_name =...",
    "published": true,
    "published_at": "2022-05-15T02:34:44.414Z",
    "slug": "daily-notes-retail-website-in-russian-p3-2020-02-07-2n5k",
    "path": "/ld8/daily-notes-retail-website-in-russian-p3-2020-02-07-2n5k",
    "url": "https://dev.to/ld8/daily-notes-retail-website-in-russian-p3-2020-02-07-2n5k",
    "comments_count": 0,
    "public_reactions_count": 3,
    "page_views_count": 15,
    "published_timestamp": "2022-05-15T02:34:44Z",
    "body_markdown": "\n## Django:\n---\n### in `urls.py` be careful which goes first  \n```python\napp_name = 'boutique'\nurlpatterns = [\n    # show index page\n    path('', views.IndexView.as_view(), name='index'),\n    \n    # show a specific item\n    path('item_\u003cint:item_pk\u003e/', views.ItemDetailView.as_view(), name='item'),\n\n    # show categories of products for men or women\n    path('\u003cslug:gender\u003e/', views.CategoryListView.as_view(), name='show-all'),\n\n    # show a specific category for men or women\n    path('\u003cslug:gender\u003e/cat_\u003cint:category_pk\u003e/', views.CategoryListView.as_view(), name='category'),\n\n    # show a specific subcategory under a specific category for men or women\n    path('\u003cslug:gender\u003e/cat_\u003cint:category_pk\u003e/subcat_\u003cint:subcategory_pk\u003e/', views.CategoryListView.as_view(), name='subcategory'),\n\n]\n```\n\n**In this file, if you put `item` after `subcategory`, `item` view will never render the correct page, as it will be hjacked by `ListView`s before it.**\n\n---\n### models - gender choices  \nexample below:\n```python\nclass Category(models.Model):\n    '''Category for men's and women's items'''\n    gender = models.IntegerField(choices=[\n        (1, 'Women'),\n        (2, 'Men'),\n    ], default=1)\n    name = models.CharField(max_length=100)\n    description = models.CharField(max_length=300, blank=True)\n    uploaded_date = models.DateTimeField(\n        auto_now_add=True, null=True, blank=True)\n\n    class Meta():\n        verbose_name_plural = 'Categories'\n\n    def __str__(self):\n        return self.get_gender_display() + ' ' + self.name\n\n    def get_category_url(self):\n        return reverse('boutique:category', kwargs={'gender': self.get_gender_display(), 'category_pk': self.pk})\n```\n#### A couple of things to notice in this example:\n* gender's choices: \n\t\t* `choices` is in small letters\n\t\t* `choices` is a list with tuples\n* access gender's choices: you can use `get_FOO_display()` to access a field's choices, checkout [this](https://docs.djangoproject.com/en/3.0/ref/models/instances/#extra-instance-methods) for more details\n\n\n\n---\n### `def get_absolute_url()` in `models.py`  \n\nmodels.py  \n```python\nfrom django.urls import reverse\n\nclass SomeModel(models.Model):\n\t\u003c---snip---\u003e\n\t\n\t# it can be any name you like because it doesn't seem to be inheriting from anything\n\tdef get_absolute_url(self):\n\t\treturn reverse('app_name:view_name', kwargs={'key': self.field_name})\n\t\t# reverse returns a string for href content\n```\nWhen implementing the url into html tag, make sure SomeModel is accessable (either by iteration or it is an object passed through context):  \n*html \n```html\n\u003ca href=\"{{ SomeModel.get_absolute_url }}\"\u003elink\u003c/a\u003e\n```\n\n### dynamic handling url: checkout this [SO question](https://stackoverflow.com/questions/60111776/django-models-py-does-get-absolute-url-function-take-conditions/60111926#60111926) I posted\nbased on the answer by _Mathias_, it's not possible unless installing a [django-middleware-global-request](https://pypi.org/project/django-middleware-global-request/)\nThen you can:\n```python\nfrom django_global_request.middleware import get_request\n\nclass TestModel(models.Model):\n\n    ...\n\n    def get_absolute_url(self):\n        request = get_request()\n\n        if request.GET.get('whatever'):\n            return ...\n        else:\n            return ...\n```\n\u003e You just need to make sure, you could still access this method without any available request. So make sure it's fail save and has a fallback in case of the absence of a request (like in a shell, upgrade, etc.)\n\n---\n### `get_queryset(self)` and `get_context_data(self, **kwargs)` in `ListView` - [CCBV](https://ccbv.co.uk/projects/Django/3.0/django.views.generic.list/ListView/)\n* __`get_queryset()` is more useful in `ListView`, because it returns a queryset for templates to render. `queryset`s are passed through context automagically! __\n* __if a model is defined in the CBV, `get_queryset()` will automatically run and acquire `model.objects.all()`, if to override it:__\n  ```python\n  class SomeView(ListView):\n    \u003c---snip---\u003e\n    # context_object_name represents the result of get_queryset()\n    # you can directly access this from the template even if you do not set context_object_name\n    context_object_name = 'coobna'\n    \n    \n    def get_queryset(self):\n      # if you still need the default functionality of this function\n      # it's like to inherite from it's superior, instead of writing a whole new function\n      queryset = super().get_queryset()\n      \n      # before returning the queryset, you can print(queryset) to debug or for referencing purposes\n      return queryset.filter(........)\n      \n      \n    def get_context_data(self, **kwargs):\n      # inherite the functionality from its 'superior'\n      context = super().get_context_data(**kwargs)\n      \n      # now you can add more context to it\n      new_context = Category.objects.all()\n      context['new_context'] = new_context\n      \n      # you can always print out the context for debugging\n      print(context)\n      return context\n  ```\n  \n* __An example of a ListView:__\n  ```python\n  class CategoryListView(ListView):\n    '''display a list of items'''\n    model = Category\n    template_name = 'boutique/items.html'\n    # context_object_name is actually the result of `get_queryset()`\n    context_object_name = 'category_shown'\n    # paginate_by = 12\n\n    def get_queryset(self):\n        # get original queryset: Category.objects.all()\n        qs = super().get_queryset()\n\n        # filter men/women\n        if self.kwargs.get('gender') == 'Women':\n            qs = qs.filter(gender=1)\n        elif self.kwargs['gender'] == 'Men':\n            qs = qs.filter(gender=2)\n\n        if self.kwargs.get('category_pk'):\n            qs = qs.filter(pk=self.kwargs.get('category_pk'))\n\n        # print('\\nqs= ', qs, '\\n')\n        return qs\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        # add categories for navbar link texts\n        context['categories'] = Category.objects.all()\n\n        if self.kwargs.get('subcategory_pk'):\n            context['subcategory_shown'] = get_object_or_404(\n                SubCategory, pk=self.kwargs.get('subcategory_pk'))\n            context['item_list'] = Item.objects.filter(\n                subcategory=self.kwargs.get('subcategory_pk'))\n            # print('\\ncontext with subcat= ', context, '\\n')\n            return context\n\n        # Because context_object_name actually represents the result of `get_queryset()`\n        # Therefore, if context_object_name is set to the same name as the context name\n        # the following expression can be omitted\n        # context['category_shown'] = self.get_queryset()\n        # The benefit of this is you don't need to run get_queryset() again!!\n\n        if self.kwargs.get('category_pk'):\n            context['item_list'] = Item.objects.filter(\n                category=self.kwargs.get('category_pk'))\n\n        # print('\\ncontext= ', context, '\\n')\n        return context\n  ```\n  \n---\n### DetailView in [CCBV](https://ccbv.co.uk/projects/Django/3.0/django.views.generic.detail/DetailView/)\n\nexample  \n```python\nclass ItemDetailView(DetailView):\n    '''display an individual item'''\n    model = Item\n    template_name = 'boutique/item.html'\n    # no need to specify as default context_object_name depends on the model\n    # they are actually the same (with lower case first letter)\n    # context_object_name = 'item'\n```\nA couple of things to note:\n* context_object_name (see comment above)\n* Two lines are sufficient for displaying standard DetailView of an item\n### HOWEVER:\nOne should be very careful about the url value passed into the CBV, checkout [my question](https://stackoverflow.com/questions/60113746/django-detailview-get-object-function-confusion) on StackO.\nurl.py\n```python\nurlpatterns = [\n\tpath('item_\u003cint:pk\u003e/', views.ItemDetailView.as_view(), name='item'),\n]\n```\nI used **`path('item_\u003cint:item_pk\u003e/'...)`** that's why it didn't work. For DetailView to work, you either have to pass in `\u003cpk\u003e` or specify in your CBV of your `pk_url_kwarg = 'item_pk'`. [docs](https://docs.djangoproject.com/en/3.0/topics/class-based-views/generic-display/#performing-extra-work)\n\n\n",
    "positive_reactions_count": 3,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--YUiMwS2y--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yeavdlqhhsekylruglfh.png",
    "tag_list": ["django", "dailynotes"],
    "canonical_url": "https://dev.to/ld8/daily-notes-retail-website-in-russian-p3-2020-02-07-2n5k",
    "reading_time_minutes": 4,
    "user": {
      "name": "Peiwen Li",
      "username": "ld8",
      "twitter_username": null,
      "github_username": "LD8",
      "website_url": "https://donlee.online",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--8Loofj0g--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/581482/7a16c106-e359-4493-a620-3d2891273245.JPG",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--7HGgm48o--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/581482/7a16c106-e359-4493-a620-3d2891273245.JPG"
    }
  },
  {
    "type_of": "article",
    "id": 1085655,
    "title": "Retail Website built with Django P2 (2020-02-05)",
    "description": "Django:               Animate your element    Animate.css wowjs StackO: how to animate an...",
    "published": true,
    "published_at": "2022-05-15T02:34:18.200Z",
    "slug": "daily-notes-retail-website-in-russian-p2-2020-02-05-179f",
    "path": "/ld8/daily-notes-retail-website-in-russian-p2-2020-02-05-179f",
    "url": "https://dev.to/ld8/daily-notes-retail-website-in-russian-p2-2020-02-05-179f",
    "comments_count": 0,
    "public_reactions_count": 4,
    "page_views_count": 16,
    "published_timestamp": "2022-05-15T02:34:18Z",
    "body_markdown": "\n## Django:\n---\n### Animate your element\n* [**Animate.css**](https://daneden.github.io/animate.css/)\n* [**wowjs**](https://wowjs.uk/docs.html)\n* [StackO: how to animate an image](https://stackoverflow.com/questions/46547695/how-to-animate-a-image-with-waypoint-or-wow-with-bootstrap-4)\n\n---\n### after cloned a django project:\nexecute the following command\n```bash\n$ python3 -m venv venv\n$ source venv/bin/activate\n(venv) $ pip install -r requirement.txt\n(venv) $ pythong manage.py runserver 127.0.0.1:8080 #(or some other port)\n```\n\n---\n### Django admin site\n\n* `$ python manage.py creatsuperuser` creates users with attr `is_superuser` or `is_staff`\n* `class ModelAdmin` from `django.contrib.admin`\n  - if you need to make changes to the default admin interface, you need to create a object of `ModelAdmin` like so: `class AuthorAdmin(admin.ModelAdmin):`, this represent `Author` model on admin dashboard\n  - instead of registering like this: `admin.site.register(Author)`, you have to use a decorator to your `AuthorAdmin` class like so:\n    ```python\n    from django.contrib import admin\n    from .models import Author\n    from myproject.admin_site import custom_admin_site\n    \n    # Reader and Editor objects have to have a ForeignKey field pointing at Author\n    @admin.register(Author, Reader, Editor, site=custom_admin_site)\n    class AuthorAdmin(admin.ModelAdmin):\n    \tpass\n    ```\n    \n  - Create [InlineModelAdmin](https://docs.djangoproject.com/en/3.0/ref/contrib/admin/#inlinemodeladmin-objects) object to display extra info on a model in admin add page.\n\n\n\n",
    "positive_reactions_count": 4,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--VALR0JB0--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwm4mtfvpcr4xennjbb5.png",
    "tag_list": ["django", "dailynotes"],
    "canonical_url": "https://dev.to/ld8/daily-notes-retail-website-in-russian-p2-2020-02-05-179f",
    "reading_time_minutes": 1,
    "user": {
      "name": "Peiwen Li",
      "username": "ld8",
      "twitter_username": null,
      "github_username": "LD8",
      "website_url": "https://donlee.online",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--8Loofj0g--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/581482/7a16c106-e359-4493-a620-3d2891273245.JPG",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--7HGgm48o--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/581482/7a16c106-e359-4493-a620-3d2891273245.JPG"
    }
  },
  {
    "type_of": "article",
    "id": 1085654,
    "title": "Retail Website built with Django P1 (2020-02-04)",
    "description": "Django:               templates builtins!!!   very useful template shortcuts, tags and many...",
    "published": true,
    "published_at": "2022-05-15T02:33:54.729Z",
    "slug": "daily-notes-retail-website-in-russian-p1-2020-02-04-n20",
    "path": "/ld8/daily-notes-retail-website-in-russian-p1-2020-02-04-n20",
    "url": "https://dev.to/ld8/daily-notes-retail-website-in-russian-p1-2020-02-04-n20",
    "comments_count": 0,
    "public_reactions_count": 4,
    "page_views_count": 25,
    "published_timestamp": "2022-05-15T02:33:54Z",
    "body_markdown": "\n## Django:\n---\n### templates builtins!!!\nvery useful [**template shortcuts, tags and many more...**](https://docs.djangoproject.com/en/3.0/ref/templates/builtins/)\n\n\n\n### Class based views: Generic VIEWS\nlearning source: \n[codingforentrepreneurs](https://www.codingforentrepreneurs.com/projects/class-based-views/handling-exceptions-objects)\n[generic views official documentation](https://docs.djangoproject.com/en/3.0/ref/class-based-views/generic-display/)\n\n\n\n### to iterate through a folder\n[StackO: iterate through a static image folder in django](https://stackoverflow.com/questions/37270170/iterate-through-a-static-image-folder-in-django):\n\u003e This isn't something Django has built in. But Django is just Python, and you can use normal Python file functions to get your list in the view:\n\u003e ```python\n\u003e files = os.listdir(os.path.join(settings.STATIC_ROOT, \"styles/jamia\"))\n\u003e ```\n\n\n\n### filter in queryset\nWhen you know what to look for:\n`category_handbags = Category.objects.filter(name='Handbags')`\nfurthur reading: [Database Functions](https://docs.djangoproject.com/en/3.0/ref/models/database-functions/)\n\n#### * filter()\n\u003e By using filter(), we can retrieve a QuerySet of just those books that were published within the last 90 days period, like so:\n\u003e\n\u003e ```python\n\u003e from datetime import datetime, timedelta \n\u003e Book.objects.filter(date_published__gte=datetime.now() - timedelta(days=90)).count()\n\u003e # __isnull\n\u003e Book.objects.filter(author__isnull=True).count()\n\u003e # __exact\n\u003e Book.objects.filter(title__exact='').count()\n\u003e ```\n\n#### * exclude()\n\u003eif we use the exact same date_published example above but swap out filter() for exclude(), we’d expect the resulting book count to be the inverse: from 3 of 20 to now 17 of 20:\n\u003e ```python\n\u003e from datetime import datetime, timedelta\n\u003e Book.objects.exclude(date_published__gte=datetime.now() - timedelta(days=90)).count()\n\u003e # combining filters\n\u003eBook.objects.exclude(author__isnull=True).exclude(title__exact='').count()\n\u003e ```\n\n\n\n### `categories.count()` vs `len(categories)`  \n`len()` loads all the data in memory then do the counting  \n`count()` is normally faster when the data is not pre loaded\nbe careful not to count a queryset manager like `categories.first().count()` will prompt `AttributeError`; however, `categories.first().subcategory_set.count()` will tell you the number of its subcategories correctly and it's the same as `len(categories.first().subcategory_set.all())`, as you can see, ALL of the subcategories are read to count the length.\n\n\n## Django - Images:\n---\n### ImageField\nTo add `ImageField` in a model and to load the image in the database onto your web:\nref: [William Vincent](https://wsvincent.com/django-image-uploads/)\nref: [GeeksforGeeks](https://www.geeksforgeeks.org/imagefield-django-models/)\n\n\n\n### uploaded images in wrong orientation:  \nphotos taken by phones have this problem sometimes, the [post](https://medium.com/@giovanni_cortes/rotate-image-in-django-when-saved-in-a-model-8fd98aac8f2a) by Giovanni solved the problem:  \n```python\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom PIL import Image, ExifTags\nfrom django.db import models\nimport os\n\nclass Item(models.Model):\n    name = ...\n    \nclass ItemImage(models.Model):\n  \titem = models.ForeignKey(Item)\n    image = models.ImageField(upload_to='itemimages', null=True, blank=True)\n\n# solves the problem that uploaded images are in wrong orientation\ndef rotate_image(filepath):\n    try:\n        image = Image.open(filepath)\n        for orientation in ExifTags.TAGS.keys():\n            if ExifTags.TAGS[orientation] == 'Orientation':\n                break\n        exif = dict(image._getexif().items())\n\n        if exif[orientation] == 3:\n            image = image.rotate(180, expand=True)\n        elif exif[orientation] == 6:\n            image = image.rotate(270, expand=True)\n        elif exif[orientation] == 8:\n            image = image.rotate(90, expand=True)\n        image.save(filepath)\n        image.close()\n    except (AttributeError, KeyError, IndexError):\n        # cases: image don't have getexif\n        pass\n\n\n@receiver(post_save, sender=ItemImage, dispatch_uid=\"update_image_item\")\ndef update_image(sender, instance, **kwargs):\n  if instance.image:\n    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    fullpath = BASE_DIR + instanc.image.url\n    rotate_image(fullpath)\n\n```\nfurture reading: [FIX UPLOADED IMAGES IN PYTHON WEBAPPS](https://www.lfchosting.com/fix-uploaded-images-python-webapps/)\n\n### image files in image field deleted but the file remains in the MEDIA foler\n[Cleanup Files (and Images) On Model Delete in Django](https://timonweb.com/posts/cleanup-files-and-images-on-model-delete-in-django/)\n\n\n\n#### ref: Online Retail websites\n* [asos](https://www.asos.com/women/): most referenced in item displaying style, categorisation filtering, most responsive\n* [LOUIS VUITTON](https://us.louisvuitton.com/eng-us/homepage): most elegant in wording and minimalistic in styling\n* [BOTTEGA VENETA](https://www.bottegaveneta.com/us): not responsive enough on laptop\n* [ACCESSORIZE LONDON](https://global.accessorize.com/en-cn/ru?skipRedirection=true): not responsive enough on laptop\n* [KUPIVIP](https://www.kupivip.ru/search?q=\u0026page=2\u0026quantity_per_page=60): looks cheap\n\n\n\n## django-bootstrap4\n---\n### containers, row and columns  \ncontainers and grid [examples](https://getbootstrap.com/docs/4.4/examples/grid/#containers)  \n`col-sm-12`: when page is 'small' width, occupy 12 columns  \n`col-md-6`: when page is 'medium' width, occupy 6 columns  \n`col-lg-4`: when page is 'large' width, occupy 4 columns  \n`col-4`: At ALL time, occupy 4 columns, unless other rules applied  \n\n`col-md-auto`: when page is 'medium' width, occupy whatever columns remain  \n\n### Default grid settings: [docs/4.4/layout/grid](https://getbootstrap.com/docs/4.4/layout/grid/)\n\n```css\n$grid-columns:      12;\n$grid-gutter-width: 30px;\n\n$grid-breakpoints: (\n  xs: 0,      // Extra small screen / phone\n  sm: 576px,  // Small screen / phone\n  md: 768px,  // Medium screen / tablet\n  lg: 992px,  // Large screen / desktop\n  xl: 1200px  // Extra large screen / wide desktop\n);\n\n$container-max-widths: (\n  sm: 540px,\n  md: 720px,\n  lg: 960px,\n  xl: 1140px\n);\n```\n\n\n\n## Simply Python:\n\n---\n\n\n### to iterate through a dictionary:  \n#### `dict.keys()` method and `dict.items()` method  \n```python\n# using dict.keys() method\nD1 = {1:'a', 2:'b', 3:'c'} \nfor key in D1.keys():\n\tprint(k, D1[k])\n# 1 a\n# 2 b\n# 3 c\n\n# using dict.items() method\nfor key, value in D1.items()\n\tprint(key, value)\n# same result\n```\n",
    "positive_reactions_count": 4,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--ES6mO4D8--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6y6xkr9haootb4fr70rx.png",
    "tag_list": ["django", "dailynotes"],
    "canonical_url": "https://dev.to/ld8/daily-notes-retail-website-in-russian-p1-2020-02-04-n20",
    "reading_time_minutes": 4,
    "user": {
      "name": "Peiwen Li",
      "username": "ld8",
      "twitter_username": null,
      "github_username": "LD8",
      "website_url": "https://donlee.online",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--8Loofj0g--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/581482/7a16c106-e359-4493-a620-3d2891273245.JPG",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--7HGgm48o--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/581482/7a16c106-e359-4493-a620-3d2891273245.JPG"
    }
  },
  {
    "type_of": "article",
    "id": 1085652,
    "title": "React Django Integration",
    "description": "Make a Django app as usual   When working with React, Django mainly serves as an API. Django...",
    "published": true,
    "published_at": "2022-05-15T02:29:43.766Z",
    "slug": "react-django-integration-1dm7",
    "path": "/ld8/react-django-integration-1dm7",
    "url": "https://dev.to/ld8/react-django-integration-1dm7",
    "comments_count": 0,
    "public_reactions_count": 4,
    "page_views_count": 8,
    "published_timestamp": "2022-05-15T02:29:43Z",
    "body_markdown": "\n## Make a Django app as usual\n\nWhen working with React, Django mainly serves as an API. Django REST framework is a must.\n\n## Make a React app as usual\n\nThe react app can be created with `create-react-app`, it doesn't really matter. Whenever you need to make an API request to get data to render, fetch it from the API you just made with Django. Of course you can use dummy data if you start off with React instead of Django.\n\n## Integration\n\nThere should be at least 3 folders in your Django app:\n\n1. `project/project` folder, meaning the one with `settings.py`\n2. `project/api` folder, the one with the api `models.py`, `serializers.py` etc.\n3. `project/frontend` folder, it's created by `manage.py startapp frontend` command and in this folder, more folders should be created:\n\n   - `src`folder: contains an `index.js` file and all other react components in `src/components` folder\n   - `static/frontend` folder: where `main.js` file lives after you run `npm run build` or `npm run dev` (depends on the script you write --\u003e keep reading)\n   - `templates/frontend` folder: where you store your django template `index.html`, remember you can use django template language/syntax in these html files\n\n### Reminders - Make sure:\n\n1. you added `frontend` app in your `settings.py`\n2. added `{% load static %}` and `\u003cscript src=\"{% static 'frontend/main.js' %}\u003e\u003c/script\u003e` in `index.html`\n3. added `index` function in your `views.py` file\n4. added according url patters in your `urls.py` file\n5. included url patterns in `frontend/urls.py` into `project/urls.py` file\n\n## Webpack configuration:\n\nAssuming you've had [`Node.js` installed](http://Nodejs.org)\n\n### 1. `package.json`\n\n```bash\n$ npm init -y\n```\n\nTo create a `package.json` file with all your javascript dependencies, `-y` means to install the defaults and not answering any questions\n\nNow the `package.json` file looks like this:\n\n```json\n{\n  \"name\": \"frontend\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" \u0026\u0026 exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\n### 2. install `webpack` and `webpack-cli`\n\n```bash\n$ npm i -D webpack webpack-cli\n```\n\n`-D` means to install as _**D**evelopment_ dependencies\n\nNow a new key added to `package.json` file:\n\n```json\n{\n  // ...\n  \"devDependencies\": {\n    \"webpack\": \"^4.43.0\",\n    \"webpack-cli\": \"^3.3.11\"\n  }\n}\n```\n\n### 3. install `babel` and `react preset`\n\n```bash\n$ npm i -D @babel/core babel-loader @babel/preset-env @babel/preset-react babel-plugin-transform-class-properties\n```\n\n- `@babel/core`: the babel core package\n- `babel-loader`: helps to transpile the code\n- `@babel/preset-env`: compile down ES6 to be compatible with other versions\n- `@babel/preset-react`: react preset\n- `babel-plugin-transform-class-properties`: handles static class properties for ES2015 and ES2016\n\nNow the `package.json` file looks like this:\n\n```json\n{\n  // ...added in step 1\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.9.0\",\n    \"@babel/preset-env\": \"^7.9.5\",\n    \"@babel/preset-react\": \"^7.9.4\",\n    \"babel-loader\": \"^8.1.0\",\n    \"babel-plugin-transform-class-properties\": \"^6.24.1\"\n    // ...added in step 2\n  }\n}\n```\n\n### 4. install `react` and `react-dom`\n\n```bash\n$ npm i react react-dom prop-types\n```\n\n- [prop-types](https://www.npmjs.com/package/prop-types):\n  \u003e Runtime type checking for React props and similar objects.\n\nNow the `package.json` file looks like this:\n\n```json\n{\n  // ...added in stop 1,2,3\n  \"dependencies\": {\n    \"prop-types\": \"^15.7.2\",\n    \"react\": \"^16.13.1\",\n    \"react-dom\": \"^16.13.1\"\n  }\n}\n```\n\nIn my project, I also installed other dependencies: `$ npm i react-router-dom react-markdown react-syntax-highlighter react-spring styled-components`\n\nAnd you might need to install more loaders for different file types:\n\n- `$ npm i -D style-loader css-loader` for css files\n- `$ npm i -D file-loader url-loader` for image files\n\n### 5. create file: `.babelrc`\n\nIn order to use the previously installed _presets_ and _plugin_, we need to create a `.babelrc` file.\n\n`~/project/frontend/.babelrc`\n\n```json\n{\n  \"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"],\n  \"plugins\": [\"transform-class-properties\"]\n}\n```\n\n### 6. create file: `webpack.config.js`\n\nWhenever you use `webpack` you'll have this config file. All we want to do here is to load `babel-loader`:\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: \"babel-loader\",\n        },\n      },\n    ],\n  },\n};\n```\n\nWhat the object does:\n\n- `test`: a regular expression to look through all of the js files\n- `exclude`: exclude `node_modules` folder\n- `use`: the `babel-loader` to transpile our code\n\nThe above is the simplest webpack config file. In real cases, there must be more `loaders` installed, you can refer to the [offical document](https://webpack.js.org/loaders/) for more information. At the end, my `webpack.config.js` becomes:\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.m?js$/,\n        exclude: /(node_modules|bower_components)/,\n        use: {\n          loader: \"babel-loader\",\n          options: {\n            presets: [\"@babel/preset-env\"],\n          },\n        },\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)$/i,\n        use: [\n          {\n            loader: \"url-loader\",\n            options: {\n              limit: 8192,\n            },\n          },\n        ],\n      },\n      {\n        test: /\\.css$/i,\n        use: [\"style-loader\", \"css-loader\"],\n      },\n    ],\n  },\n};\n```\n\n### 7. write `scripts` in `package.json`\n\nTo compile our React app which lives in the `frontend` app, some scripts have to be defined:\n\n`~/project/frontend/package.json`\n\n```json\n{\n  // ...\n  \"scripts\": {\n    \"dev\": \"webpack --mode development --watch ./src/index.js --output ./static/frontend/main.js\",\n    \"build\": \"webpack --mode production ./src/index.js --output ./static/frontend/main.js\"\n  }\n  // ...\n}\n```\n\nThe scripts defined above would enable us the following commands:\n\n- `$ npm run dev`: run `webpack`, use `--mode development`, `--watch` every updates in `./src/index.js` file, and compile it to `./static/frontend/main.js` file\n- `$ npm run build`: does a few extra thing for production\n\n### 8. `$ npm run dev`\n\nAfter this script is run, `main.js` file will be ready to use.\n\n## Notes on routing\n\n- In the MAIN `urls.py` file, include the frontend urls at then end\n- Use `re_path()` method in frontend `urls.py` file to define the url pattern\n- Use extra 'negative lookahead' to exclude api calls in order to avoid url clash between different django apps (in this case the `frontend` app and my `api` app which serves the api calls):`re_path(r'^(?!api)(?:.*)/?$', views.index),`\n\n## A remember of `npm` commands\n\n- `npm uninstall \u003cname\u003e` removes the module from `node_modules` but does not update `package.json`\n\n- `npm uninstall \u003cname\u003e --save` also removes it from `dependencies` in `package.json`\n\n- `npm uninstall \u003cname\u003e --save-dev` also removes it from `devDependencies` in `package.json`\n\n- `npm uninstall -g \u003cname\u003e --save` also removes it globally\n",
    "positive_reactions_count": 4,
    "cover_image": null,
    "tag_list": [],
    "canonical_url": "https://dev.to/ld8/react-django-integration-1dm7",
    "reading_time_minutes": 4,
    "user": {
      "name": "Peiwen Li",
      "username": "ld8",
      "twitter_username": null,
      "github_username": "LD8",
      "website_url": "https://donlee.online",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--8Loofj0g--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/581482/7a16c106-e359-4493-a620-3d2891273245.JPG",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--7HGgm48o--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/581482/7a16c106-e359-4493-a620-3d2891273245.JPG"
    }
  },
  {
    "type_of": "article",
    "id": 1085651,
    "title": "React Django Deployment",
    "description": "This is a post about React Django Deployment on VPS Ubuntu LTS 18.04. I couldn't find any detailed...",
    "published": true,
    "published_at": "2022-05-15T02:29:15.622Z",
    "slug": "react-django-deployment-4a63",
    "path": "/ld8/react-django-deployment-4a63",
    "url": "https://dev.to/ld8/react-django-deployment-4a63",
    "comments_count": 0,
    "public_reactions_count": 4,
    "page_views_count": 8,
    "published_timestamp": "2022-05-15T02:29:15Z",
    "body_markdown": "\nThis is a post about React Django Deployment on VPS Ubuntu LTS 18.04. I couldn't find any detailed guide or tutorials for newbies so I guess sharing my experience is the best I can do for now.\n\n## GitHub pull\n\nBasically, everything is up in the repo. All you need is to pull/clone your repo into your Ubuntu directory. Install virtual environment for Django, run `pip install -r requirements.txt`, go to your `frontend` app where your frontend React files live and run `npm install`.\n\nBut before that you might need to install `node.js` and `npm`, which should have been a piece of cake however, Ubuntu didn't make it easy.\n\n## Install `node` and `npm` on Ubuntu 18.04\n\nThe node.js version on Ubuntu is quite old (8+). So follow these steps:\n\n```bash\n$ sodu apt install curl\n```\n\ninstall `curl` and download and execute the Node.js 10.x installer:\n\n```bash\n$ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n```\n\nThen install the package. This will automatically install `npm` as well. Thanks for the [post](https://joshtronic.com/2018/05/08/how-to-install-nodejs-10-on-ubuntu-1804-lts/) by Josh Tronic.\n\n```bash\n$ sudo apt install nodejs\n```\n\nCheck your version by typing\n\n```bash\n$ node -v\nv10.20.1\n$ npm -v\n6.14.4\n```\n\n## Notes on deployment\n\n- migrattion: remember to ignore migration files when you FIRST deploy the Django app because if you do not and you've made many migrations locally for the mistakes you made during the development process: when deploying the app, migration changes can not be detected, hence no migrations will be made.\n- imported image urls: somehow after webpack compiles the js files to `main.js`, Django `collectstatic` command copies all the necessary static files into the `static` folder in root folder, HOWEVER, the url for those imported images (`import BG from './assets/img/bg.jpg'`) in js files can not maintain the correct link (to `http://www.domain.com/static/img/bg.jpg`), instead, it links to `http://www.domain.com/bg.jpg`. I still can't figure out whether it's a webpack.config issue or python settings issue...\n- `main.js` is 700kb it's apparently too slow to load from a Russian VPS server to local (China), takes 60 seconds to load. However, it's 7 seconds to load from LA, US. I'll try to split the file ([source](https://webpack.js.org/guides/code-splitting/))\n",
    "positive_reactions_count": 4,
    "cover_image": null,
    "tag_list": [],
    "canonical_url": "https://dev.to/ld8/react-django-deployment-4a63",
    "reading_time_minutes": 2,
    "user": {
      "name": "Peiwen Li",
      "username": "ld8",
      "twitter_username": null,
      "github_username": "LD8",
      "website_url": "https://donlee.online",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--8Loofj0g--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/581482/7a16c106-e359-4493-a620-3d2891273245.JPG",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--7HGgm48o--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/581482/7a16c106-e359-4493-a620-3d2891273245.JPG"
    }
  },
  {
    "type_of": "article",
    "id": 1085649,
    "title": "An Intro to UmiJS",
    "description": "Why Umi?   Frontend development has been distinguished from backend for quite a while now....",
    "published": true,
    "published_at": "2022-05-15T02:27:30.993Z",
    "slug": "an-intro-to-umijs-1630",
    "path": "/ld8/an-intro-to-umijs-1630",
    "url": "https://dev.to/ld8/an-intro-to-umijs-1630",
    "comments_count": 0,
    "public_reactions_count": 4,
    "page_views_count": 16,
    "published_timestamp": "2022-05-15T02:27:30Z",
    "body_markdown": "\n\n\n## Why Umi?\n\nFrontend development has been distinguished from backend for quite a while now. Many frameworks and plugins have been developed for frontend developemnt. Sometimes it's difficult to initialise a project because there are too many tools to choose from. To achieve this, [_UmiJS_](https://umijs.org/) came to live.\n\n## Before everything else -\n\nIn order to use Umi (a frontend framework), you need to have [_NodeJS_](https://nodejs.org/en/) installed.\n\nIf you happened to be in China, you can install _cnpm_ or _tyarn_ for faster and safer package management:\n\n```bash\n$ npm install -g cnpm --registry=https://registry.npm.taobao.org\n# OR\n$ npm i yarn tyarn -g\n```\n\nThen, you can use `cnpm`/`tyarn` to install your dependencies.\n\n## Umi Initialisation: Global\n\nYou can install umi globally:\n\n```bash\n$ tyarn global add umi\n# OR\n$ cnpm install umi -g\n```\n\nThen, you can use 'umi generator' to fast start some pages:\n\n- [generator command](https://umijs.org/zh-CN/docs/cli#umi-generate)\n\n  ```bash\n  $ umi g page index\n  ```\n\n  This will first generate a `pages` folder under current directory inside which a `index.js` file and a `index,css` file will be created automatically. Each `js` file in `pages` directory will be interpreted as a route. Normally, this command is run at the root directory of the project.\n\n- umi dev\n\n  ```bash\n  $ umi dev\n  ```\n\n  This will start serving the pages on port 8000+.\n\n## Umi Initialisation: Scaffold\n\nYou can also initialise umi project with umi scaffold in a project folder\n\n### 1. make a new directory\n\n```bash\n$ mkdir antd-testing\n$ cd antd-testing\n```\n\n### 2. install umi\n\n```bash\n$ tyarn create @umijs/umi-app\n```\n\nNow the initialisation process has been complete, following up the configuration of the project.\n\n### 3. Install Dependencies \u0026 Start\n\n```bash\n$ tyarn\n```\n\nThen:\n\n```bash\n$ tyarn start\n```\n\n**PS**: you can use 'Ant Design' default layout by installing [`pro-layout`](https://www.npmjs.com/package/@ant-design/pro-layout) by running:\n\n```bash\n$ tyarn add @ant-design/pro-layout\n# or\n$ cnpm i @ant-design/pro-layout --save\n```\n\nThen, edit `.umirc.ts` file:\n\n```ts\nimport { defineConfig } from 'umi'\n\nexport default defineConfig({\n  nodeModulesTransform: {\n    type: 'none',\n  },\n  layout: {}, // add this line\n  routes: [{ path: '/', component: '@/pages/index' }],\n})\n```\n\n## Run script\n\nNow you can run the following commands to start the server.\n\n```bash\n$ umi dev\n# OR\n$ cnpm run dev\n# OR\n$ tyarn start\n```\n\n## [Routing](https://umijs.org/zh-CN/docs/routing)\n\n### [Conventional Routing (File Routing) - 约定式路由](https://umijs.org/zh-CN/docs/convention-routing)\n\nThe folder structure, i.e. files under `src/pages`, represents the default routing.\n\n- [Dynamic Routing](https://umijs.org/zh-CN/docs/convention-routing#%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1): by convention, folder named `[post]` will become a variable in the routes like so `/index/:post`\n- [Nested Routing](https://umijs.org/zh-CN/docs/convention-routing#%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1): by convention, if `_layout.tsx` exists in a sub-folder of `pages` folder, `_layout.tsx` becomes the parent component of all the other components within the same folder\n- [Overall layout](https://umijs.org/zh-CN/docs/convention-routing#%E5%85%A8%E5%B1%80-layout): by convention, **_`index.tsx` file in `src/layouts` folder_** is the parent component of all the components in **_`src/pages` folder_**\n- [404 Routing](https://umijs.org/zh-CN/docs/convention-routing#404-%E8%B7%AF%E7%94%B1): by convention, `404.tsx` in `pages` folder is the component renders 404 page\n- [Extra Routing Attribute](https://umijs.org/zh-CN/docs/convention-routing#%E6%89%A9%E5%B1%95%E8%B7%AF%E7%94%B1%E5%B1%9E%E6%80%A7): before exporting a component, add this line `HomePage.title = 'Home Page'`, now you can access an extra routing attribute `title`\n\n### Configured Routing - 配置式路由\n\nIf you are not satisfied with this routing method, configure your `config/config.js`/`.umirc.ts` file to appoint the routes yourself (i.e. _configured routing (配置式路由)_ as opposed to the default _conventional routing (约定式路由)_):\n\n```js\nexport default {\n  routes: [\n    {\n      exact: true,\n      path: '/',\n      component: '@pages/FirstPage', // relative path from `src` folder\n      routes: [\n        { path: '/list', component: 'List' },\n        { path: '/listing', redirect: '/list' }, // redirecting to other routes\n        { path: '/admin', component: 'Admin' },\n      ],\n    },\n  ],\n}\n```\n\n**NOTES**: `@` represents `./src` -- referring to the relative path; it is the same as `..` as in `../Firstpage`\n\n### history: to navigate\n\nIn Umi, there are two ways to direct user from one page to another: `\u003cLink to=\"/link_url\"\u003eSomewhere\u003c/Link\u003e` component and `history.push('/link_url')`:\n\n```js\nimport { history } from 'umi'\n\n// simply redirecting\nhistory.push('/list')\n\n// redirecting with variables\nhistory.push('/list?a=b')\nhistory.push({\n  pathname: '/list',\n  query: {\n    a: 'b',\n  },\n})\n\n// go back\nhistory.goBack()\n```\n\n## Build\n\n```bash\n$ cnpm run build\n```\n\nRun this code to build the `dist` folder. Do not forget to install `serve` globally.\n\n```bash\n$ cnpm install serve -g\n```\n\nThen you can serve the dist folder directly on port 5000:\n\n```bash\n$ serve ./dist\n```\n\n## plugins\n\nTo check the list of plugins in an umi project:\n\n```bash\n$ umi plugin list\n\n# showing the keys\n$ umi plugin list --key\n```\n\nOnce you know the `key` of a `plugin`, you can config the plugin in your config file:\n\n```js\nexport default {\n  mock: false,\n  // OR\n  mock: { exclude: ['./foo'] },\n}\n```\n\n## [Mock data](https://umijs.org/zh-CN/docs/mock)\n\nMock data lives in `/mock` folder. A tipical mockup `api.ts` file looks like this:\n\n```ts\nexport default {\n  // 支持值为 Object 和 Array\n  'GET /api/users': { users: [1, 2] },\n  // GET 可忽略\n  '/api/users/1': { id: 1 },\n  // 支持自定义函数，API 参考 express@4\n  'POST /api/users/create': (req, res) =\u003e {\n    // 添加跨域请求头\n    res.setHeader('Access-Control-Allow-Origin', '*')\n    res.end('ok')\n  },\n}\n```\n\nNow, if you visit `/api/users`, `{ users: [1, 2] }` will be returned. `GET` key word can be omitted.\n\n### [Mock.js](http://mockjs.com/)\n\nYou can use mock.js to auto-generate some mockup data, visit the website for more info.\n\n## [Environment Variables](https://umijs.org/zh-CN/docs/env-variables)\n\n## [DynamicImport](https://umijs.org/zh-CN/docs/load-on-demand)\n",
    "positive_reactions_count": 4,
    "cover_image": null,
    "tag_list": ["javascript", "webdev"],
    "canonical_url": "https://dev.to/ld8/an-intro-to-umijs-1630",
    "reading_time_minutes": 4,
    "user": {
      "name": "Peiwen Li",
      "username": "ld8",
      "twitter_username": null,
      "github_username": "LD8",
      "website_url": "https://donlee.online",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--8Loofj0g--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/581482/7a16c106-e359-4493-a620-3d2891273245.JPG",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--7HGgm48o--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/581482/7a16c106-e359-4493-a620-3d2891273245.JPG"
    }
  },
  {
    "type_of": "article",
    "id": 1085646,
    "title": "Install `Fira Code Font` in VSCode",
    "description": "\"Fira Code\" is a font which helps the readability of your code. This is how you install it on...",
    "published": true,
    "published_at": "2022-05-15T02:23:15.515Z",
    "slug": "install-fira-code-font-in-vscode-17p4",
    "path": "/ld8/install-fira-code-font-in-vscode-17p4",
    "url": "https://dev.to/ld8/install-fira-code-font-in-vscode-17p4",
    "comments_count": 0,
    "public_reactions_count": 3,
    "page_views_count": 32,
    "published_timestamp": "2022-05-15T02:23:15Z",
    "body_markdown": "\"Fira Code\" is a font which helps the readability of your code. This is how you install it on VSCode.\n\n- Firstly, install the font:\n  You can run the following command on mac or visit [this post on github](https://github.com/tonsky/FiraCode/wiki/Installing) for other OS.\n\n```bash\nbrew tap homebrew/cask-fonts\nbrew cask install font-fira-code\n```\n\n- Edit the`settings.json` file in VSCode\n\n```json\n//settings.json\n{\n  //...\n  \"editor.fontFamily\": \"'Fira Code', Menlo, Monaco, 'Courier New', monospace\",\n  \"editor.fontLigatures\": true\n}\n```\n\n- Other ways and more options [visit this post here](https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions)\n",
    "positive_reactions_count": 3,
    "cover_image": null,
    "tag_list": ["beginners", "vscode"],
    "canonical_url": "https://dev.to/ld8/install-fira-code-font-in-vscode-17p4",
    "reading_time_minutes": 1,
    "user": {
      "name": "Peiwen Li",
      "username": "ld8",
      "twitter_username": null,
      "github_username": "LD8",
      "website_url": "https://donlee.online",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--8Loofj0g--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/581482/7a16c106-e359-4493-a620-3d2891273245.JPG",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--7HGgm48o--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/581482/7a16c106-e359-4493-a620-3d2891273245.JPG"
    }
  }
]
